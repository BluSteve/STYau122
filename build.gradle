plugins {
    id 'java'
}

group 'org.example'
version ''

repositories {
    mavenCentral()
}

def static getOsString() {
    String vendor = System.getProperty("java.vendor")
    if ("The Android Project" == vendor) {
        return "android"
    } else {
        String osName = System.getProperty("os.name")
        osName = osName.toLowerCase(Locale.ENGLISH)
        if (osName.startsWith("windows")) {
            return "windows"
        } else if (osName.startsWith("mac os")) {
            return "apple"
        } else if (osName.startsWith("linux")) {
            return "linux"
        } else if (osName.startsWith("sun")) {
            return "sun"
        }
        return "unknown"
    }
}

def static getArchString() {
    String osArch = System.getProperty("os.arch")
    osArch = osArch.toLowerCase(Locale.ENGLISH)
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
        return "x86"
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
        return "x86_64"
    } else if (osArch.startsWith("arm64")) {
        return "arm64"
    } else if (osArch.startsWith("arm")) {
        return "arm"
    } else if ("ppc" == osArch || "powerpc" == osArch) {
        return "ppc"
    } else if (osArch.startsWith("ppc")) {
        return "ppc_64"
    } else if (osArch.startsWith("sparc")) {
        return "sparc"
    } else if (osArch.startsWith("mips64")) {
        return "mips64"
    } else if (osArch.startsWith("mips")) {
        return "mips"
    } else if (osArch.contains("risc")) {
        return "risc"
    }
    return "unknown"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'Main',
                'Multi-Release': 'true'
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'org.ejml:ejml-all:0.41'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.jblas:jblas:1.2.5'
    implementation 'org.greenrobot:essentials:3.1.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.1'

    def classifier = getOsString() + "-" + getArchString()
    def jCudaVersion = "11.4.1"
    implementation(group: 'org.jcuda', name: 'jcuda', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcublas', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcufft', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcusparse', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcurand', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcusolver', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcudnn', version: jCudaVersion) {
        transitive = false
    }

    implementation group: 'org.jcuda', name: 'jcuda-natives',
            classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcublas-natives',
            classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcufft-natives',
            classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcusparse-natives',
            classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcurand-natives',
            classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcusolver-natives',
            classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcudnn-natives',
            classifier: classifier, version: jCudaVersion
}